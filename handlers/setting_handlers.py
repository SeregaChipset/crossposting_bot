import sys, pathlib
from aiogram import Router, F, types
from aiogram.filters import StateFilter
from config.config import load_cfg, save_cfg
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from fsm import FSMSettings
from keyboards.main_kbd import markup_cancel
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message, InputMediaPhoto)


router: Router = Router()

TEST = (f'<b>–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ ASUS GeForce RTX 2060 Dual EVO OC Edition </b>\n\n'
        f'–æ–±–µ—Å–ø–µ—á–∏—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ü–ö –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö - –±—É–¥—å —Ç–æ –∏–≥—Ä—ã –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ –∏–ª–∏ —Ä–µ—Ç—É—à—å —Ñ–æ—Ç–æ. –í –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∏–ø, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–∏–∫—Ä–æ–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Turing. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1365–ú–ì—Ü –¥–æ 1785–ú–ì—Ü, —á—Ç–æ –≤–∫—É–ø–µ —Å 6 –ì–ë –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–∂–µ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.'
        f'–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ ASUS GeForce RTX 2060 –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ PCI-E, –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑—ä–µ–º 8-pin. –î–ª—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ 2 –≤—ã—Ö–æ–¥–∞ HDMI, DVI-D, –∞ —Ç–∞–∫–∂–µ DisplayPort.\n\n'
        f'–¶–µ–Ω–∞: 15990 ‚ÇΩ\n\n')


# —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(StateFilter(default_state), F.data == '/setting')
async def process_setting(callback: CallbackQuery, state: FSMContext):
    post_view_button = InlineKeyboardButton(
        text='–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ üìù',
        callback_data='/post_view'
    )
    podval_button = InlineKeyboardButton(
        text='–ü–æ–¥–≤–∞–ª üëπÔ∏è',
        callback_data='/podval'
    )
    tokens_button = InlineKeyboardButton(
        text='–¢–æ–∫–µ–Ω—ã ü§ñ',
        callback_data='/tokens'
    )
    cancel_button = InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚ùå',
        callback_data='/cancel'
    )
    keyboard: list[list[InlineKeyboardButton]] = [
        [post_view_button, podval_button], [tokens_button, cancel_button]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.answer(
        text='<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n',
        reply_markup=markup
    )
    await state.set_state(FSMSettings.fill_settings)


@router.callback_query(StateFilter(FSMSettings.fill_settings), F.data == '/post_view')
async def post_view(callback: CallbackQuery):
    path = pathlib.Path(sys.argv[0]).parent
    media_group = [InputMediaPhoto(media=types.FSInputFile(f'{path}/sample_photo/photo_1.jpg'),
                                   caption=f'{TEST}{load_cfg()["podval"]}', parse_mode = 'HTML'),
                   InputMediaPhoto(media=types.FSInputFile(f'{path}/sample_photo/photo_2.jpg')),
                   InputMediaPhoto(media=types.FSInputFile(f'{path}/sample_photo/photo_3.jpg'))]
    await callback.message.answer_media_group(
        media=media_group
    )
    await callback.message.answer(
        text='–ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–∏–¥ –ø–æ—Å—Ç–∞ –≤ —Ç–µ–ª–µ–≥–µ (–≤ –≤–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–Ω–∞—á–µ)',
        reply_markup=markup_cancel
    )


@router.callback_query(StateFilter(FSMSettings.fill_settings), F.data == '/podval')
async def podval_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é</b>\n\n'
             f'–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥–≤–∞–ª:\n{load_cfg()["podval"]}',
        parse_mode='HTML',
        reply_markup=markup_cancel
    )
    await state.set_state(FSMSettings.fill_podval)


@router.message(StateFilter(FSMSettings.fill_podval), F.text)
async def process_podval_sent(message: Message):
    cfg = load_cfg()
    cfg["podval"] = message.text
    save_cfg(cfg)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö',
                         reply_markup=markup_cancel)


@router.message(StateFilter(FSMSettings.fill_podval))
async def warning_not_podval(message: Message):
    await message.answer(
        text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n'
             '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–≤–∞–ª–∞ –µ—â–µ —Ä–∞–∑–æ–∫\n\n',
        reply_markup=markup_cancel
    )


@router.callback_query(StateFilter(FSMSettings.fill_settings), F.data == '/tokens')
async def token_edit(callback: CallbackQuery, state: FSMContext):
    cfg = load_cfg()
    await callback.message.answer(
        #text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤–∫</b>\n\n',
        text = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ\n\n'
               f'–¢–æ–∫–µ–Ω –≤–∫: {cfg["token_vk"]}\n\n'
               f'id –∞–ª—å–±–æ–º–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫: {cfg["album_id"]}\n\n'
               f'id –≥—Ä—É–ø–ø—ã –¥–ª—è –≤–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞: {cfg["group_vk"]}\n\n'
               f'–∫–∞–Ω–∞–ª –¥–ª—è —Ç–≥ –ø–æ—Å—Ç–∏–Ω–≥–∞: {cfg["group_tg"]}\n\n',
        parse_mode='HTML',
        reply_markup=markup_cancel
    )
    #await state.set_state(FSMSettings.fill_token)


@router.message(StateFilter(FSMSettings.fill_token), F.text)
async def process_tokenvk_sent(message: Message, state: FSMContext):
    cfg = load_cfg()
    cfg["token_vk"] = message.text
    save_cfg(cfg)
    await message.answer(text='–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
                             f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π id –≥—Ä—É–ø–ø—ã</b>\n\n',
                         parse_mode='HTML',
                         reply_markup=markup_cancel)
    await state.set_state(FSMSettings.fill_group)


@router.message(StateFilter(FSMSettings.fill_token))
async def warning_not_token(message: Message):
    await message.answer(
        text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n'
             '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –µ—â–µ —Ä–∞–∑–æ–∫\n\n',
        reply_markup=markup_cancel
    )

@router.message(StateFilter(FSMSettings.fill_group), F.text)
async def process_group_sent(message: Message, state: FSMContext):
    cfg = load_cfg()
    cfg["group_tg"] = message.text
    save_cfg(cfg)
    await message.answer(text='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n',
                         reply_markup=markup_cancel)
    await state.set_state(FSMSettings.fill_group)


@router.message(StateFilter(FSMSettings.fill_group))
async def warning_not_group(message: Message):
    await message.answer(
        text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n'
             '–í–≤–µ–¥–∏—Ç–µ –∏–¥ –≥—Ä—É–ø–ø—ã –µ—â–µ —Ä–∞–∑–æ–∫\n\n',
        reply_markup=markup_cancel
    )
